---
import { ScrollArea } from '@/components/ui/scroll-area'
import { cn } from '@/lib/utils'
import type { MarkdownHeading } from 'astro'
import { Icon } from 'astro-icon/components'

type Props = {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props

function getHeadingMargin(depth: number): string {
  const margins: Record<number, string> = {
    3: 'ml-4',
    4: 'ml-8',
    5: 'ml-12',
    6: 'ml-16',
  }
  return margins[depth] || ''
}

function cleanupHeading(text: string): string {
  text = text.replace(/&lt;/g, '<').replace(/&gt;/g, '>')
  text = text.replace(/&amp;/g, '&').replace(/&quot;/g, '"')
  text = text.replace(/&#39;/g, "'").replace(/&apos;/g, "'")
  text = text.replace(/:/g, '')
  text = text.replace(/,/g, '')
  return text.replace(/<[^>]+>/g, '').replace(/&nbsp;/g, ' ')
}

// Groups H2 and their H3 children
function groupHeadingsByH2(headings: MarkdownHeading[]) {
  const grouped: Array<{
    h2: MarkdownHeading
    h3Children: MarkdownHeading[]
  }> = []

  let currentGroup: { h2: MarkdownHeading; h3Children: MarkdownHeading[] } | null = null

  headings.forEach((heading) => {
    if (heading.depth === 2) {
      // New H2: create a new group
      if (currentGroup) {
        grouped.push(currentGroup)
      }
      currentGroup = { h2: heading, h3Children: [] }
    } else if (currentGroup && heading.depth === 3) {
      // H3 : add to current group
      currentGroup.h3Children.push(heading)
    }
  })

  if (currentGroup) {
    grouped.push(currentGroup)
  }

  return grouped
}

const groupedHeadings = groupHeadingsByH2(headings)
---

<details
  open
  class="group col-start-2 rounded-xl border p-4 xl:sticky xl:top-26 xl:col-start-1 xl:mr-auto xl:h-[calc(100vh-5rem)] xl:w-56 xl:rounded-none xl:border-none xl:p-0"
  >
  <summary
    class="flex cursor-pointer items-center justify-between text-xl font-medium group-open:pb-4"
  >
    <div>
      <hr class="mb-4 hidden md:block xl:w-40" />
      <h2
        id="skills-title"
        class="font-custom flex items-center gap-x-2 text-2xl font-bold text-neutral-900 dark:text-white"
      >
        Sommaire 
        <Icon
          name="lucide:chevron-down"
          class="size-5 shrink-0 transition-transform group-open:rotate-180"
        />
      </h2>
      <p class="text-xs  text-neutral-600 dark:text-neutral-300 pr-18">
        Voici la liste de toutes les sections de cet article. Cliquez sur l'une d'entre elles pour accéder à cette section.
      </p>
    </div>
  </summary>

  <ScrollArea
    client:load
    className="flex max-h-64 flex-col overflow-y-auto xl:max-h-[calc(100vh-8rem)]"
    type="always"
  >
    <ul
      class="flex list-none flex-col gap-y-1 px-2 xl:mr-10"
      id="table-of-contents"
    >
      {groupedHeadings.map((group) => (
        <li class="text-foreground/75 text-sm xl:p-0">
          {/* H2 title with toggle if there are H3 */}
          <div class={cn(
            "flex items-center gap-2 min-h-[44px] sm:gap-0", 
            group.h3Children.length > 0 ? "cursor-pointer hover:bg-accent/20 rounded-md px-1 py-1" : ""
          )}>
            {group.h3Children.length > 0 && (
              <div class="flex items-center justify-center w-6 h-6">
                <Icon 
                  name="lucide:chevron-right" 
                  class="size-5 transition-transform section-toggle" 
                />
              </div>
            )}
            <a
              href={`#${group.h2.slug}`}
              class="marker:text-foreground/30 flex-1 list-disc px-3 py-2 underline decoration-transparent underline-offset-[3px] transition-colors duration-200 hover:decoration-inherit xl:list-none font-medium"
              aria-label={`Aller à la section ${group.h2.text}`}
              title={`Aller à la section ${group.h2.text}`}
            >
              {cleanupHeading(group.h2.text)}
            </a>
          </div>
          
          {/* List of H3 children (hidden by default if there are any) */}
          {group.h3Children.length > 0 && (
            <ul class="section-children hidden flex-col gap-y-1 mt-1 transition-all duration-200">
              {group.h3Children.map((h3) => (
                <li class={cn(
                  'text-foreground/60 text-sm xl:p-0',
                  getHeadingMargin(h3.depth)
                )}>
                  <a
                    href={`#${h3.slug}`}
                    class="marker:text-foreground/30 block list-disc px-3 py-1 underline decoration-transparent underline-offset-[3px] transition-colors duration-200 hover:decoration-inherit xl:list-none text-xs"
                    aria-label={`Aller à la section ${h3.text}`}
                    title={`Aller à la section ${h3.text}`}
                  >
                    {cleanupHeading(h3.text)}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ul>
  </ScrollArea>
</details>

<script is:inline>
  function setupToc() {
    const header = document.querySelector('header')
    const headerHeight = header ? header.offsetHeight : 0
    
    // Setup intersection observer for active section highlighting
    const observer = new IntersectionObserver(
      (sections) => {
        sections.forEach((section) => {
          const heading = section.target.querySelector('h2, h3, h4, h5, h6')
          if (!heading) return
          const id = heading.getAttribute('id')
          const link = document.querySelector(
            `#table-of-contents li a[href="#${id}"]`
          )
          if (!link) return
          const addRemove = section.isIntersecting ? 'add' : 'remove'
          link.classList[addRemove]('text-foreground')
        })
      },
      {
        rootMargin: `-${headerHeight}px 0px 0px 0px`,
      }
    )
    
    const sections = document.querySelectorAll('.prose section')
    sections.forEach((section) => {
      observer.observe(section)
    })

    // Setup collapsible sections pour tous les H2 qui ont des H3
    const toggles = document.querySelectorAll('.section-toggle')
    
    toggles.forEach((toggle) => {
      const listItem = toggle.closest('li')
      const children = listItem?.querySelector('.section-children')
      const parentDiv = toggle.closest('div')
            
      if (parentDiv && children) {
        parentDiv.addEventListener('click', (e) => {
          // Ignore clicks on links
          if (e.target.tagName === 'A') {
            return
          }
          
          e.preventDefault()
          e.stopPropagation()
          
          const isHidden = children.classList.contains('hidden')
          
          if (isHidden) {
            children.classList.remove('hidden')
            children.classList.add('flex')
            toggle.classList.add('rotate-90')
          } else {
            children.classList.add('hidden')
            children.classList.remove('flex')
            toggle.classList.remove('rotate-90')
          }
        })
      }
    })
  }

  // Execute on initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupToc)
  } else {
    setupToc()
  }
  
  // Execute on page navigation (Astro Islands)
  document.addEventListener('astro:page-load', setupToc)
  document.addEventListener('astro:after-swap', setupToc)
</script>